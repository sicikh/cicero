/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as VerifyRouteImport } from "./routes/verify/route";
import { Route as TemplatesRouteImport } from "./routes/templates/route";
import { Route as ResetRouteImport } from "./routes/reset/route";
import { Route as RegisterRouteImport } from "./routes/register/route";
import { Route as LoginRouteImport } from "./routes/login/route";
import { Route as IndexRouteImport } from "./routes/index/route";
import { Route as TemplatesNewRouteImport } from "./routes/templates/new/route";
import { Route as TemplatesTemplateIdRouteImport } from "./routes/templates/$templateId/route";
import { Route as ConstructorTemplateIdRouteImport } from "./routes/constructor/$templateId/route";

// Create/Update Routes

const VerifyRouteRoute = VerifyRouteImport.update({
  path: "/verify",
  getParentRoute: () => rootRoute,
} as any);

const TemplatesRouteRoute = TemplatesRouteImport.update({
  path: "/templates",
  getParentRoute: () => rootRoute,
} as any);

const ResetRouteRoute = ResetRouteImport.update({
  path: "/reset",
  getParentRoute: () => rootRoute,
} as any);

const RegisterRouteRoute = RegisterRouteImport.update({
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const LoginRouteRoute = LoginRouteImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const IndexRouteRoute = IndexRouteImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const TemplatesNewRouteRoute = TemplatesNewRouteImport.update({
  path: "/new",
  getParentRoute: () => TemplatesRouteRoute,
} as any);

const TemplatesTemplateIdRouteRoute = TemplatesTemplateIdRouteImport.update({
  path: "/$templateId",
  getParentRoute: () => TemplatesRouteRoute,
} as any);

const ConstructorTemplateIdRouteRoute = ConstructorTemplateIdRouteImport.update(
  {
    path: "/constructor/$templateId",
    getParentRoute: () => rootRoute,
  } as any,
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/reset": {
      id: "/reset";
      path: "/reset";
      fullPath: "/reset";
      preLoaderRoute: typeof ResetRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/templates": {
      id: "/templates";
      path: "/templates";
      fullPath: "/templates";
      preLoaderRoute: typeof TemplatesRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/verify": {
      id: "/verify";
      path: "/verify";
      fullPath: "/verify";
      preLoaderRoute: typeof VerifyRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/constructor/$templateId": {
      id: "/constructor/$templateId";
      path: "/constructor/$templateId";
      fullPath: "/constructor/$templateId";
      preLoaderRoute: typeof ConstructorTemplateIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/templates/$templateId": {
      id: "/templates/$templateId";
      path: "/$templateId";
      fullPath: "/templates/$templateId";
      preLoaderRoute: typeof TemplatesTemplateIdRouteImport;
      parentRoute: typeof TemplatesRouteImport;
    };
    "/templates/new": {
      id: "/templates/new";
      path: "/new";
      fullPath: "/templates/new";
      preLoaderRoute: typeof TemplatesNewRouteImport;
      parentRoute: typeof TemplatesRouteImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRouteRoute,
  LoginRouteRoute,
  RegisterRouteRoute,
  ResetRouteRoute,
  TemplatesRouteRoute: TemplatesRouteRoute.addChildren({
    TemplatesTemplateIdRouteRoute,
    TemplatesNewRouteRoute,
  }),
  VerifyRouteRoute,
  ConstructorTemplateIdRouteRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/reset",
        "/templates",
        "/verify",
        "/constructor/$templateId"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/login": {
      "filePath": "login/route.tsx"
    },
    "/register": {
      "filePath": "register/route.tsx"
    },
    "/reset": {
      "filePath": "reset/route.tsx"
    },
    "/templates": {
      "filePath": "templates/route.tsx",
      "children": [
        "/templates/$templateId",
        "/templates/new"
      ]
    },
    "/verify": {
      "filePath": "verify/route.tsx"
    },
    "/constructor/$templateId": {
      "filePath": "constructor/$templateId/route.tsx"
    },
    "/templates/$templateId": {
      "filePath": "templates/$templateId/route.tsx",
      "parent": "/templates"
    },
    "/templates/new": {
      "filePath": "templates/new/route.tsx",
      "parent": "/templates"
    }
  }
}
ROUTE_MANIFEST_END */
